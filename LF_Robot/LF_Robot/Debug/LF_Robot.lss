
LF_Robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000984  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000984  00000a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000031  00800068  00800068  00000a20  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000845  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000058c  00000000  00000000  00001331  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005fb  00000000  00000000  000018bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003df  00000000  00000000  00001f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006f  00000000  00000000  0000232f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000239e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e8       	ldi	r30, 0x84	; 132
  3a:	f9 e0       	ldi	r31, 0x09	; 9
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 36       	cpi	r26, 0x68	; 104
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a8 e6       	ldi	r26, 0x68	; 104
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a9 39       	cpi	r26, 0x99	; 153
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	4f d0       	rcall	.+158    	; 0xf8 <main>
  5a:	92 c4       	rjmp	.+2340   	; 0x980 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <ADC_settings>:
#define E_0  PORTD &= ~(1<<3); // Синхронизация
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ADC_settings (void)
{
	DDRC &= ~((1<<3) | (1<<2));
  5e:	84 b3       	in	r24, 0x14	; 20
  60:	83 7f       	andi	r24, 0xF3	; 243
  62:	84 bb       	out	0x14, r24	; 20
	
	ADCSRA |=(1<<ADEN); // Включаем АЦП
  64:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA &= ~(1<<ADFR); // Режим дискретного измерения 
  66:	35 98       	cbi	0x06, 5	; 6
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);	//Частота дискретизации 125 000 Гц (16 млн / 128) при частоте 16 МГц
  68:	86 b1       	in	r24, 0x06	; 6
  6a:	87 60       	ori	r24, 0x07	; 7
  6c:	86 b9       	out	0x06, r24	; 6
	
	ADMUX |=(1<<REFS1) | (1<<REFS0); // Внутр. ист. опорного напряжения 2,56 В с конденсатором на AREF
  6e:	87 b1       	in	r24, 0x07	; 7
  70:	80 6c       	ori	r24, 0xC0	; 192
  72:	87 b9       	out	0x07, r24	; 7

	ADMUX &= ~(1<<ADLAR); // Правостороннее выравнивание
  74:	3d 98       	cbi	0x07, 5	; 7
  76:	08 95       	ret

00000078 <ADC_channal_PC2>:
	
}

void ADC_channal_PC2 (void)
{
	ADMUX &= ~((1<<MUX3) | (1<<MUX2) | (1<<MUX0));
  78:	87 b1       	in	r24, 0x07	; 7
  7a:	82 7f       	andi	r24, 0xF2	; 242
  7c:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1<<MUX1);
  7e:	39 9a       	sbi	0x07, 1	; 7
	
	ADCSRA |= (1<<ADSC); // Запуск ADC
  80:	36 9a       	sbi	0x06, 6	; 6
	
	while ((ADCSRA & (1<<ADSC))); // Бесконечный цикл ожидания окончания работы ADC
  82:	36 99       	sbic	0x06, 6	; 6
  84:	fe cf       	rjmp	.-4      	; 0x82 <ADC_channal_PC2+0xa>
}
  86:	08 95       	ret

00000088 <ADC_channal_PC3>:

void ADC_channal_PC3 (void)
{
	ADMUX &= ~((1<<MUX3) | (1<<MUX2));
  88:	87 b1       	in	r24, 0x07	; 7
  8a:	83 7f       	andi	r24, 0xF3	; 243
  8c:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1<<MUX1) | (1<<MUX0);
  8e:	87 b1       	in	r24, 0x07	; 7
  90:	83 60       	ori	r24, 0x03	; 3
  92:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA |= (1<<ADSC); // Запуск ADC
  94:	36 9a       	sbi	0x06, 6	; 6
	
	while ((ADCSRA & (1<<ADSC))); // Бесконечный цикл ожидания окончания работы ADC
  96:	36 99       	sbic	0x06, 6	; 6
  98:	fe cf       	rjmp	.-4      	; 0x96 <ADC_channal_PC3+0xe>
}
  9a:	08 95       	ret

0000009c <PWM_1_settings>:
char y_flag = 0;


void PWM_1_settings (void)
{
	DDRB |= (1<<1); // Выход PWM для таймера 1, OC1A
  9c:	b9 9a       	sbi	0x17, 1	; 23
	TCCR1A |= (1<<COM1A1); // НЕинвертирующая ШИМ
  9e:	8f b5       	in	r24, 0x2f	; 47
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1<<COM1A0); // НЕинвертирующая ШИМ
  a4:	8f b5       	in	r24, 0x2f	; 47
  a6:	8f 7b       	andi	r24, 0xBF	; 191
  a8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS11); // Запуск таймера + делим частоту на 8
	TCCR1B &= ~((1<<CS12) | (1<<CS10)); // Запуск таймера + делим частоту на 8
	
	*/
	
	TCCR1A |=  (1<<WGM10); // 8-bit Phase Correct PWM
  aa:	8f b5       	in	r24, 0x2f	; 47
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1<<WGM11); // 8-bit Phase Correct PWM
  b0:	8f b5       	in	r24, 0x2f	; 47
  b2:	8d 7f       	andi	r24, 0xFD	; 253
  b4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B &= ~(1<<WGM12); // 8-bit Phase Correct PWM
  b6:	8e b5       	in	r24, 0x2e	; 46
  b8:	87 7f       	andi	r24, 0xF7	; 247
  ba:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<WGM13); // 8-bit Phase Correct PWM
  bc:	8e b5       	in	r24, 0x2e	; 46
  be:	8f 7e       	andi	r24, 0xEF	; 239
  c0:	8e bd       	out	0x2e, r24	; 46
	
	//TCCR1B |= (1<<CS10); // Запуск таймера + не делим частоту
	//TCCR1B &= ~((1<<CS12) | (1<<CS11)); // Запуск таймера + не делим частоту
	TCCR1B |= (1<<CS11); // Запуск таймера + делим частоту на 8
  c2:	8e b5       	in	r24, 0x2e	; 46
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~((1<<CS12) | (1<<CS10)); // Запуск таймера + делим частоту на 8
  c8:	8e b5       	in	r24, 0x2e	; 46
  ca:	8a 7f       	andi	r24, 0xFA	; 250
  cc:	8e bd       	out	0x2e, r24	; 46
  ce:	08 95       	ret

000000d0 <PWM_2_settings>:
}

void PWM_2_settings (void)
{ 
	DDRB |= (1<<3); // Выход PWM для таймера 2, OS2
  d0:	bb 9a       	sbi	0x17, 3	; 23
	TCCR2 |= (1<<COM21); // НЕинвертирующая PWM
  d2:	85 b5       	in	r24, 0x25	; 37
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~(1<<COM20); // НЕинвертирующая PWM
  d8:	85 b5       	in	r24, 0x25	; 37
  da:	8f 7e       	andi	r24, 0xEF	; 239
  dc:	85 bd       	out	0x25, r24	; 37
	
	TCCR2 &= ~((1<<CS22) | (1<<CS20)); // Запуск таймера + делим частоту на 8
	TCCR2 |= (1<<CS21); // Запуск таймера + делим частоту на 8
*/

	TCCR2 |=  (1<<WGM20); //8-bit Phase correct PWM
  de:	85 b5       	in	r24, 0x25	; 37
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~(1<<WGM21); //8-bit Phase correct PWM
  e4:	85 b5       	in	r24, 0x25	; 37
  e6:	87 7f       	andi	r24, 0xF7	; 247
  e8:	85 bd       	out	0x25, r24	; 37
	
	//TCCR2 &= ~((1<<CS22) | (1<<CS21)); // Запуск таймера + не делим частоту
	//TCCR2 |= (1<<CS20); // Запуск таймера + не делим частоту
	TCCR2 &= ~((1<<CS22) | (1<<CS20)); // Запуск таймера + делим частоту на 8
  ea:	85 b5       	in	r24, 0x25	; 37
  ec:	8a 7f       	andi	r24, 0xFA	; 250
  ee:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<<CS21); // Запуск таймера + делим частоту на 8
  f0:	85 b5       	in	r24, 0x25	; 37
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	85 bd       	out	0x25, r24	; 37
  f6:	08 95       	ret

000000f8 <main>:
}

int main(void)
{
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
 100:	28 97       	sbiw	r28, 0x08	; 8
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	f8 94       	cli
 106:	de bf       	out	0x3e, r29	; 62
 108:	0f be       	out	0x3f, r0	; 63
 10a:	cd bf       	out	0x3d, r28	; 61
	ACSR |= (1<<7); // Отключаем компаратор, ради экономии энергии (по умолчанию он включен).
 10c:	47 9a       	sbi	0x08, 7	; 8
	
	ADC_settings ();
 10e:	a7 df       	rcall	.-178    	; 0x5e <ADC_settings>
	
	PWM_1_settings ();
 110:	c5 df       	rcall	.-118    	; 0x9c <PWM_1_settings>
	PWM_2_settings ();
 112:	de df       	rcall	.-68     	; 0xd0 <PWM_2_settings>
	
	DDRD |= (1<<7); // Двигатель левый
 114:	8f 9a       	sbi	0x11, 7	; 17
	DDRB |= (1<<0); // Двигатель правый
 116:	b8 9a       	sbi	0x17, 0	; 23
	PORTD &= ~(1<<7); // Минус - движение вперед - Двигатель левый
 118:	97 98       	cbi	0x12, 7	; 18
	PORTB &= ~(1<<0); // Минус - движение вперед - Двигатель правый
 11a:	c0 98       	cbi	0x18, 0	; 24
 11c:	0b e8       	ldi	r16, 0x8B	; 139
 11e:	10 e0       	ldi	r17, 0x00	; 0
 120:	0f 2e       	mov	r0, r31
 122:	f9 e9       	ldi	r31, 0x99	; 153
 124:	8f 2e       	mov	r8, r31
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	9f 2e       	mov	r9, r31
 12a:	f0 2d       	mov	r31, r0
			PORTD &= ~(1<<7); // Минус - движение вперед - Двигатель левый
			PORTB &= ~(1<<0); // Минус - движение вперед - Двигатель правый
			
			ERR_y_priv = ERR_y;
			ERR_y = y - 60;
			y_flag = 1;
 12c:	66 24       	eor	r6, r6
 12e:	63 94       	inc	r6
				OCR1A = 180 - PID_U_t;;
				OCR2 = 255;
			}
			else
			{
			OCR1A = 180 - PID_U_t; // Левый двигатель - левая гусеница (вид спереди)
 130:	0f 2e       	mov	r0, r31
 132:	f4 eb       	ldi	r31, 0xB4	; 180
 134:	cf 2e       	mov	r12, r31
 136:	d1 2c       	mov	r13, r1
 138:	f0 2d       	mov	r31, r0
			OCR2 = 180 + PID_U_t;// Правый двигатель - правая гусеница (вид спереди)			
 13a:	0f 2e       	mov	r0, r31
 13c:	f3 e7       	ldi	r31, 0x73	; 115
 13e:	af 2e       	mov	r10, r31
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	bf 2e       	mov	r11, r31
 144:	f0 2d       	mov	r31, r0
				OCR2 = 180 - PID_U_t;
			}
			else
			{
			OCR1A = 180 + PID_U_t; // Левый двигатель - левая гусеница (вид спереди)
			OCR2 = 180 - PID_U_t; // Правый двигатель - правая гусеница (вид спереди)
 146:	0f 2e       	mov	r0, r31
 148:	f4 eb       	ldi	r31, 0xB4	; 180
 14a:	7f 2e       	mov	r7, r31
 14c:	f0 2d       	mov	r31, r0
		PORTB |= (1<<0);
		OCR1A = 127;
		OCR2 = 127;
		_delay_ms(5000);
		*/						  
		ADC_channal_PC2(); // x - Левый датчик - зеленый провод - PC2 - ADC2
 14e:	94 df       	rcall	.-216    	; 0x78 <ADC_channal_PC2>
		if (ADCSRA & (1<<ADIF))
 150:	34 9b       	sbis	0x06, 4	; 6
 152:	13 c0       	rjmp	.+38     	; 0x17a <main+0x82>
		{			
			arr_filter_PC2[i] = ADC;
 154:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <i>
 158:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <i+0x1>
 15c:	24 b1       	in	r18, 0x04	; 4
 15e:	35 b1       	in	r19, 0x05	; 5
 160:	fc 01       	movw	r30, r24
 162:	ee 0f       	add	r30, r30
 164:	ff 1f       	adc	r31, r31
 166:	e5 57       	subi	r30, 0x75	; 117
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	31 83       	std	Z+1, r19	; 0x01
 16c:	20 83       	st	Z, r18
			i++;
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <i+0x1>
 174:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <i>
			ADCSRA |= (1<<ADIF);
 178:	34 9a       	sbi	0x06, 4	; 6
		}		
		
		ADC_channal_PC3();
 17a:	86 df       	rcall	.-244    	; 0x88 <ADC_channal_PC3>
		
		if (ADCSRA & (1<<ADIF))
 17c:	34 9b       	sbis	0x06, 4	; 6
 17e:	4d c0       	rjmp	.+154    	; 0x21a <main+0x122>
		{
			arr_filter_PC3[j] = ADC; 
 180:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <j>
 184:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <j+0x1>
 188:	84 b1       	in	r24, 0x04	; 4
 18a:	95 b1       	in	r25, 0x05	; 5
 18c:	f9 01       	movw	r30, r18
 18e:	ee 0f       	add	r30, r30
 190:	ff 1f       	adc	r31, r31
 192:	e3 58       	subi	r30, 0x83	; 131
 194:	ff 4f       	sbci	r31, 0xFF	; 255
 196:	91 83       	std	Z+1, r25	; 0x01
 198:	80 83       	st	Z, r24
			j++;
 19a:	2f 5f       	subi	r18, 0xFF	; 255
 19c:	3f 4f       	sbci	r19, 0xFF	; 255
 19e:	3a 83       	std	Y+2, r19	; 0x02
 1a0:	29 83       	std	Y+1, r18	; 0x01
 1a2:	30 93 7a 00 	sts	0x007A, r19	; 0x80007a <j+0x1>
 1a6:	20 93 79 00 	sts	0x0079, r18	; 0x800079 <j>
			
			if (i>6) // Рассчёты последнего шага тут, чтобы не всрать время замера со второго датчика
 1aa:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <i>
 1ae:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <i+0x1>
 1b2:	07 97       	sbiw	r24, 0x07	; 7
 1b4:	b4 f0       	brlt	.+44     	; 0x1e2 <main+0xea>
			{
				x = 0;
				i = 0;
 1b6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <i+0x1>
 1ba:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <i>
 1be:	eb e8       	ldi	r30, 0x8B	; 139
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	90 e0       	ldi	r25, 0x00	; 0
				for (int k = 0; k < 7; k++)
				{
					x = x + arr_filter_PC2[k] ;
 1c6:	21 91       	ld	r18, Z+
 1c8:	31 91       	ld	r19, Z+
 1ca:	82 0f       	add	r24, r18
 1cc:	93 1f       	adc	r25, r19
			
			if (i>6) // Рассчёты последнего шага тут, чтобы не всрать время замера со второго датчика
			{
				x = 0;
				i = 0;
				for (int k = 0; k < 7; k++)
 1ce:	8e 16       	cp	r8, r30
 1d0:	9f 06       	cpc	r9, r31
 1d2:	c9 f7       	brne	.-14     	; 0x1c6 <main+0xce>
				{
					x = x + arr_filter_PC2[k] ;
				}
				x = x/7;
 1d4:	67 e0       	ldi	r22, 0x07	; 7
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	ac d3       	rcall	.+1880   	; 0x932 <__divmodhi4>
 1da:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <x+0x1>
 1de:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <x>
			}
			
			if (j>6)
 1e2:	29 81       	ldd	r18, Y+1	; 0x01
 1e4:	3a 81       	ldd	r19, Y+2	; 0x02
 1e6:	27 30       	cpi	r18, 0x07	; 7
 1e8:	31 05       	cpc	r19, r1
 1ea:	b4 f0       	brlt	.+44     	; 0x218 <main+0x120>
			{
				y = 0;
				j = 0;	
 1ec:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <j+0x1>
 1f0:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <j>
 1f4:	ed e7       	ldi	r30, 0x7D	; 125
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	90 e0       	ldi	r25, 0x00	; 0
				for (int n = 0; n < 7; n++)
				{
				y = y +	arr_filter_PC3[n];
 1fc:	21 91       	ld	r18, Z+
 1fe:	31 91       	ld	r19, Z+
 200:	82 0f       	add	r24, r18
 202:	93 1f       	adc	r25, r19
			
			if (j>6)
			{
				y = 0;
				j = 0;	
				for (int n = 0; n < 7; n++)
 204:	e0 17       	cp	r30, r16
 206:	f1 07       	cpc	r31, r17
 208:	c9 f7       	brne	.-14     	; 0x1fc <main+0x104>
				{
				y = y +	arr_filter_PC3[n];
				}
				y = y/7;
 20a:	67 e0       	ldi	r22, 0x07	; 7
 20c:	70 e0       	ldi	r23, 0x00	; 0
 20e:	91 d3       	rcall	.+1826   	; 0x932 <__divmodhi4>
 210:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <y+0x1>
 214:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <y>
			}
			ADCSRA |= (1<<ADIF);
 218:	34 9a       	sbi	0x06, 4	; 6
		}

		if ((x<60) && (y<60))
 21a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <x>
 21e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <x+0x1>
 222:	8c 33       	cpi	r24, 0x3C	; 60
 224:	91 05       	cpc	r25, r1
 226:	9c f4       	brge	.+38     	; 0x24e <main+0x156>
 228:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <y>
 22c:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <y+0x1>
 230:	2c 33       	cpi	r18, 0x3C	; 60
 232:	31 05       	cpc	r19, r1
 234:	64 f4       	brge	.+24     	; 0x24e <main+0x156>
		{
			PORTD &= ~(1<<7); // Минус - движение вперед - Двигатель левый
 236:	97 98       	cbi	0x12, 7	; 18
			PORTB &= ~(1<<0); // Минус - движение вперед - Двигатель правый
 238:	c0 98       	cbi	0x18, 0	; 24
			
			OCR1A = 180; // Левый двигатель - левая гусеница (вид спереди)
 23a:	db bc       	out	0x2b, r13	; 43
 23c:	ca bc       	out	0x2a, r12	; 42
			OCR2 = 180;// Правый двигатель - правая гусеница (вид спереди)
 23e:	73 bc       	out	0x23, r7	; 35
			flag_for_start = 1;
 240:	60 92 6a 00 	sts	0x006A, r6	; 0x80006a <flag_for_start>
			x_flag = 0;
 244:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <x_flag>
			y_flag = 0;
 248:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 24c:	10 c0       	rjmp	.+32     	; 0x26e <main+0x176>
		}
		
		if ((flag_for_start==0) && ((x>60) && (y>60)))
 24e:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <flag_for_start>
 252:	21 11       	cpse	r18, r1
 254:	0c c0       	rjmp	.+24     	; 0x26e <main+0x176>
 256:	cd 97       	sbiw	r24, 0x3d	; 61
 258:	0c f4       	brge	.+2      	; 0x25c <main+0x164>
 25a:	93 c1       	rjmp	.+806    	; 0x582 <__stack+0x123>
 25c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <y>
 260:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <y+0x1>
 264:	cd 97       	sbiw	r24, 0x3d	; 61
 266:	8c f0       	brlt	.+34     	; 0x28a <main+0x192>
		{
			OCR1A = 0; // Левый двигатель - левая гусеница (вид спереди)
 268:	1b bc       	out	0x2b, r1	; 43
 26a:	1a bc       	out	0x2a, r1	; 42
			OCR2 = 0;// Правый двигатель - правая гусеница (вид спереди)
 26c:	13 bc       	out	0x23, r1	; 35
		}
		
		if ((x>60) && (y<61))
 26e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <x>
 272:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <x+0x1>
 276:	cd 97       	sbiw	r24, 0x3d	; 61
 278:	0c f4       	brge	.+2      	; 0x27c <main+0x184>
 27a:	7b c1       	rjmp	.+758    	; 0x572 <__stack+0x113>
 27c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <y>
 280:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <y+0x1>
 284:	cd 97       	sbiw	r24, 0x3d	; 61
 286:	0c f0       	brlt	.+2      	; 0x28a <main+0x192>
 288:	8c c0       	rjmp	.+280    	; 0x3a2 <main+0x2aa>
		{
			PORTD &= ~(1<<7); // Минус - движение вперед - Двигатель левый
 28a:	97 98       	cbi	0x12, 7	; 18
			PORTB &= ~(1<<0); // Минус - движение вперед - Двигатель правый
 28c:	c0 98       	cbi	0x18, 0	; 24
			
			ERR_x_priv = ERR_x;
 28e:	e0 90 71 00 	lds	r14, 0x0071	; 0x800071 <ERR_x>
 292:	f0 90 72 00 	lds	r15, 0x0072	; 0x800072 <ERR_x+0x1>
 296:	f0 92 70 00 	sts	0x0070, r15	; 0x800070 <ERR_x_priv+0x1>
 29a:	e0 92 6f 00 	sts	0x006F, r14	; 0x80006f <ERR_x_priv>
			ERR_x = x - 60;
 29e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <x>
 2a2:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <x+0x1>
 2a6:	cc 97       	sbiw	r24, 0x3c	; 60
 2a8:	9e 83       	std	Y+6, r25	; 0x06
 2aa:	8d 83       	std	Y+5, r24	; 0x05
 2ac:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <ERR_x+0x1>
 2b0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <ERR_x>
			x_flag = 1;
 2b4:	60 92 69 00 	sts	0x0069, r6	; 0x800069 <x_flag>
			
			PID_PROPORTIONAL_int = (int) round (2 * ADC_to_ERR_coeff * ERR_x);
 2b8:	20 90 60 00 	lds	r2, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2bc:	30 90 61 00 	lds	r3, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2c0:	40 90 62 00 	lds	r4, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 2c4:	50 90 63 00 	lds	r5, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 2c8:	a2 01       	movw	r20, r4
 2ca:	91 01       	movw	r18, r2
 2cc:	c2 01       	movw	r24, r4
 2ce:	b1 01       	movw	r22, r2
 2d0:	61 d1       	rcall	.+706    	; 0x594 <__addsf3>
 2d2:	69 83       	std	Y+1, r22	; 0x01
 2d4:	7a 83       	std	Y+2, r23	; 0x02
 2d6:	8b 83       	std	Y+3, r24	; 0x03
 2d8:	9c 83       	std	Y+4, r25	; 0x04
 2da:	ed 81       	ldd	r30, Y+5	; 0x05
 2dc:	fe 81       	ldd	r31, Y+6	; 0x06
 2de:	bf 01       	movw	r22, r30
 2e0:	ff 0f       	add	r31, r31
 2e2:	88 0b       	sbc	r24, r24
 2e4:	99 0b       	sbc	r25, r25
 2e6:	ed d1       	rcall	.+986    	; 0x6c2 <__floatsisf>
 2e8:	9b 01       	movw	r18, r22
 2ea:	ac 01       	movw	r20, r24
 2ec:	69 81       	ldd	r22, Y+1	; 0x01
 2ee:	7a 81       	ldd	r23, Y+2	; 0x02
 2f0:	8b 81       	ldd	r24, Y+3	; 0x03
 2f2:	9c 81       	ldd	r25, Y+4	; 0x04
 2f4:	72 d2       	rcall	.+1252   	; 0x7da <__mulsf3>
 2f6:	d4 d2       	rcall	.+1448   	; 0x8a0 <round>
 2f8:	b1 d1       	rcall	.+866    	; 0x65c <__fixsfsi>
 2fa:	69 83       	std	Y+1, r22	; 0x01
 2fc:	7a 83       	std	Y+2, r23	; 0x02
 2fe:	8b 83       	std	Y+3, r24	; 0x03
 300:	9c 83       	std	Y+4, r25	; 0x04
 302:	29 81       	ldd	r18, Y+1	; 0x01
 304:	3a 81       	ldd	r19, Y+2	; 0x02
 306:	30 93 78 00 	sts	0x0078, r19	; 0x800078 <PID_PROPORTIONAL_int+0x1>
 30a:	20 93 77 00 	sts	0x0077, r18	; 0x800077 <PID_PROPORTIONAL_int>
			
			PID_DERIVATIVE_int = (int) round (1.5 * ADC_to_ERR_coeff * (ERR_x - ERR_x_priv));
 30e:	8d 81       	ldd	r24, Y+5	; 0x05
 310:	9e 81       	ldd	r25, Y+6	; 0x06
 312:	8e 19       	sub	r24, r14
 314:	9f 09       	sbc	r25, r15
 316:	9e 83       	std	Y+6, r25	; 0x06
 318:	8d 83       	std	Y+5, r24	; 0x05
 31a:	bc 01       	movw	r22, r24
 31c:	99 0f       	add	r25, r25
 31e:	88 0b       	sbc	r24, r24
 320:	99 0b       	sbc	r25, r25
 322:	cf d1       	rcall	.+926    	; 0x6c2 <__floatsisf>
 324:	6d 83       	std	Y+5, r22	; 0x05
 326:	7e 83       	std	Y+6, r23	; 0x06
 328:	8f 83       	std	Y+7, r24	; 0x07
 32a:	98 87       	std	Y+8, r25	; 0x08
 32c:	20 e0       	ldi	r18, 0x00	; 0
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	40 ec       	ldi	r20, 0xC0	; 192
 332:	5f e3       	ldi	r21, 0x3F	; 63
 334:	c2 01       	movw	r24, r4
 336:	b1 01       	movw	r22, r2
 338:	50 d2       	rcall	.+1184   	; 0x7da <__mulsf3>
 33a:	9b 01       	movw	r18, r22
 33c:	ac 01       	movw	r20, r24
 33e:	6d 81       	ldd	r22, Y+5	; 0x05
 340:	7e 81       	ldd	r23, Y+6	; 0x06
 342:	8f 81       	ldd	r24, Y+7	; 0x07
 344:	98 85       	ldd	r25, Y+8	; 0x08
 346:	49 d2       	rcall	.+1170   	; 0x7da <__mulsf3>
 348:	ab d2       	rcall	.+1366   	; 0x8a0 <round>
 34a:	88 d1       	rcall	.+784    	; 0x65c <__fixsfsi>
 34c:	70 93 76 00 	sts	0x0076, r23	; 0x800076 <PID_DERIVATIVE_int+0x1>
 350:	60 93 75 00 	sts	0x0075, r22	; 0x800075 <PID_DERIVATIVE_int>

			PID_U_t = PID_PROPORTIONAL_int + PID_DERIVATIVE_int;
 354:	29 80       	ldd	r2, Y+1	; 0x01
 356:	3a 80       	ldd	r3, Y+2	; 0x02
 358:	26 0e       	add	r2, r22
 35a:	37 1e       	adc	r3, r23
 35c:	30 92 74 00 	sts	0x0074, r3	; 0x800074 <PID_U_t+0x1>
 360:	20 92 73 00 	sts	0x0073, r2	; 0x800073 <PID_U_t>
			
			if (PID_U_t > 75) 
 364:	9c e4       	ldi	r25, 0x4C	; 76
 366:	29 16       	cp	r2, r25
 368:	31 04       	cpc	r3, r1
 36a:	54 f0       	brlt	.+20     	; 0x380 <main+0x288>
			{
				OCR1A = 255;
 36c:	ef ef       	ldi	r30, 0xFF	; 255
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	fb bd       	out	0x2b, r31	; 43
 372:	ea bd       	out	0x2a, r30	; 42
				OCR2 = 180 - PID_U_t;
 374:	f5 01       	movw	r30, r10
 376:	80 81       	ld	r24, Z
 378:	f7 2d       	mov	r31, r7
 37a:	f8 1b       	sub	r31, r24
 37c:	f3 bd       	out	0x23, r31	; 35
 37e:	0a c0       	rjmp	.+20     	; 0x394 <main+0x29c>
			}
			else
			{
			OCR1A = 180 + PID_U_t; // Левый двигатель - левая гусеница (вид спереди)
 380:	24 eb       	ldi	r18, 0xB4	; 180
 382:	22 0e       	add	r2, r18
 384:	31 1c       	adc	r3, r1
 386:	3b bc       	out	0x2b, r3	; 43
 388:	2a bc       	out	0x2a, r2	; 42
			OCR2 = 180 - PID_U_t; // Правый двигатель - правая гусеница (вид спереди)
 38a:	f5 01       	movw	r30, r10
 38c:	80 81       	ld	r24, Z
 38e:	f7 2d       	mov	r31, r7
 390:	f8 1b       	sub	r31, r24
 392:	f3 bd       	out	0x23, r31	; 35
			}
		}

		if ((y>60) && (x<61))
 394:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <y>
 398:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <y+0x1>
 39c:	cd 97       	sbiw	r24, 0x3d	; 61
 39e:	0c f4       	brge	.+2      	; 0x3a2 <main+0x2aa>
 3a0:	8a c0       	rjmp	.+276    	; 0x4b6 <__stack+0x57>
 3a2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <x>
 3a6:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <x+0x1>
 3aa:	cd 97       	sbiw	r24, 0x3d	; 61
 3ac:	0c f0       	brlt	.+2      	; 0x3b0 <main+0x2b8>
 3ae:	83 c0       	rjmp	.+262    	; 0x4b6 <__stack+0x57>
		{
			PORTD &= ~(1<<7); // Минус - движение вперед - Двигатель левый
 3b0:	97 98       	cbi	0x12, 7	; 18
			PORTB &= ~(1<<0); // Минус - движение вперед - Двигатель правый
 3b2:	c0 98       	cbi	0x18, 0	; 24
			
			ERR_y_priv = ERR_y;
 3b4:	e0 90 6d 00 	lds	r14, 0x006D	; 0x80006d <ERR_y>
 3b8:	f0 90 6e 00 	lds	r15, 0x006E	; 0x80006e <ERR_y+0x1>
 3bc:	f0 92 6c 00 	sts	0x006C, r15	; 0x80006c <ERR_y_priv+0x1>
 3c0:	e0 92 6b 00 	sts	0x006B, r14	; 0x80006b <ERR_y_priv>
			ERR_y = y - 60;
 3c4:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <y>
 3c8:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <y+0x1>
 3cc:	2c 53       	subi	r18, 0x3C	; 60
 3ce:	31 09       	sbc	r19, r1
 3d0:	3e 83       	std	Y+6, r19	; 0x06
 3d2:	2d 83       	std	Y+5, r18	; 0x05
 3d4:	30 93 6e 00 	sts	0x006E, r19	; 0x80006e <ERR_y+0x1>
 3d8:	20 93 6d 00 	sts	0x006D, r18	; 0x80006d <ERR_y>
			y_flag = 1;
 3dc:	60 92 68 00 	sts	0x0068, r6	; 0x800068 <__data_end>
			
			PID_PROPORTIONAL_int = (int) round (2 * ADC_to_ERR_coeff * ERR_y);
 3e0:	20 90 60 00 	lds	r2, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3e4:	30 90 61 00 	lds	r3, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3e8:	40 90 62 00 	lds	r4, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 3ec:	50 90 63 00 	lds	r5, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 3f0:	a2 01       	movw	r20, r4
 3f2:	91 01       	movw	r18, r2
 3f4:	c2 01       	movw	r24, r4
 3f6:	b1 01       	movw	r22, r2
 3f8:	cd d0       	rcall	.+410    	; 0x594 <__addsf3>
 3fa:	69 83       	std	Y+1, r22	; 0x01
 3fc:	7a 83       	std	Y+2, r23	; 0x02
 3fe:	8b 83       	std	Y+3, r24	; 0x03
 400:	9c 83       	std	Y+4, r25	; 0x04
 402:	ed 81       	ldd	r30, Y+5	; 0x05
 404:	fe 81       	ldd	r31, Y+6	; 0x06
 406:	bf 01       	movw	r22, r30
 408:	ff 0f       	add	r31, r31
 40a:	88 0b       	sbc	r24, r24
 40c:	99 0b       	sbc	r25, r25
 40e:	59 d1       	rcall	.+690    	; 0x6c2 <__floatsisf>
 410:	9b 01       	movw	r18, r22
 412:	ac 01       	movw	r20, r24
 414:	69 81       	ldd	r22, Y+1	; 0x01
 416:	7a 81       	ldd	r23, Y+2	; 0x02
 418:	8b 81       	ldd	r24, Y+3	; 0x03
 41a:	9c 81       	ldd	r25, Y+4	; 0x04
 41c:	de d1       	rcall	.+956    	; 0x7da <__mulsf3>
 41e:	40 d2       	rcall	.+1152   	; 0x8a0 <round>
 420:	1d d1       	rcall	.+570    	; 0x65c <__fixsfsi>
 422:	69 83       	std	Y+1, r22	; 0x01
 424:	7a 83       	std	Y+2, r23	; 0x02
 426:	8b 83       	std	Y+3, r24	; 0x03
 428:	9c 83       	std	Y+4, r25	; 0x04
 42a:	29 81       	ldd	r18, Y+1	; 0x01
 42c:	3a 81       	ldd	r19, Y+2	; 0x02
 42e:	30 93 78 00 	sts	0x0078, r19	; 0x800078 <PID_PROPORTIONAL_int+0x1>
 432:	20 93 77 00 	sts	0x0077, r18	; 0x800077 <PID_PROPORTIONAL_int>
			
			PID_DERIVATIVE_int = (int) round (1.5 * ADC_to_ERR_coeff * (ERR_y - ERR_y_priv));
 436:	8d 81       	ldd	r24, Y+5	; 0x05
 438:	9e 81       	ldd	r25, Y+6	; 0x06
 43a:	8e 19       	sub	r24, r14
 43c:	9f 09       	sbc	r25, r15
 43e:	9e 83       	std	Y+6, r25	; 0x06
 440:	8d 83       	std	Y+5, r24	; 0x05
 442:	bc 01       	movw	r22, r24
 444:	99 0f       	add	r25, r25
 446:	88 0b       	sbc	r24, r24
 448:	99 0b       	sbc	r25, r25
 44a:	3b d1       	rcall	.+630    	; 0x6c2 <__floatsisf>
 44c:	6d 83       	std	Y+5, r22	; 0x05
 44e:	7e 83       	std	Y+6, r23	; 0x06
 450:	8f 83       	std	Y+7, r24	; 0x07
 452:	98 87       	std	Y+8, r25	; 0x08
 454:	20 e0       	ldi	r18, 0x00	; 0
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	40 ec       	ldi	r20, 0xC0	; 192
 45a:	5f e3       	ldi	r21, 0x3F	; 63
 45c:	c2 01       	movw	r24, r4
 45e:	b1 01       	movw	r22, r2
 460:	bc d1       	rcall	.+888    	; 0x7da <__mulsf3>
 462:	9b 01       	movw	r18, r22
 464:	ac 01       	movw	r20, r24
 466:	6d 81       	ldd	r22, Y+5	; 0x05
 468:	7e 81       	ldd	r23, Y+6	; 0x06
 46a:	8f 81       	ldd	r24, Y+7	; 0x07
 46c:	98 85       	ldd	r25, Y+8	; 0x08
 46e:	b5 d1       	rcall	.+874    	; 0x7da <__mulsf3>
 470:	17 d2       	rcall	.+1070   	; 0x8a0 <round>
 472:	f4 d0       	rcall	.+488    	; 0x65c <__fixsfsi>
 474:	70 93 76 00 	sts	0x0076, r23	; 0x800076 <PID_DERIVATIVE_int+0x1>
 478:	60 93 75 00 	sts	0x0075, r22	; 0x800075 <PID_DERIVATIVE_int>
			
			PID_U_t = PID_PROPORTIONAL_int + PID_DERIVATIVE_int;
 47c:	29 80       	ldd	r2, Y+1	; 0x01
 47e:	3a 80       	ldd	r3, Y+2	; 0x02
 480:	26 0e       	add	r2, r22
 482:	37 1e       	adc	r3, r23
 484:	30 92 74 00 	sts	0x0074, r3	; 0x800074 <PID_U_t+0x1>
 488:	20 92 73 00 	sts	0x0073, r2	; 0x800073 <PID_U_t>
			
			if (PID_U_t > 75) 
 48c:	9c e4       	ldi	r25, 0x4C	; 76
 48e:	29 16       	cp	r2, r25
 490:	31 04       	cpc	r3, r1
 492:	44 f0       	brlt	.+16     	; 0x4a4 <__stack+0x45>
			{
				OCR1A = 180 - PID_U_t;;
 494:	c6 01       	movw	r24, r12
 496:	82 19       	sub	r24, r2
 498:	93 09       	sbc	r25, r3
 49a:	9b bd       	out	0x2b, r25	; 43
 49c:	8a bd       	out	0x2a, r24	; 42
				OCR2 = 255;
 49e:	ef ef       	ldi	r30, 0xFF	; 255
 4a0:	e3 bd       	out	0x23, r30	; 35
 4a2:	09 c0       	rjmp	.+18     	; 0x4b6 <__stack+0x57>
			}
			else
			{
			OCR1A = 180 - PID_U_t; // Левый двигатель - левая гусеница (вид спереди)
 4a4:	c6 01       	movw	r24, r12
 4a6:	82 19       	sub	r24, r2
 4a8:	93 09       	sbc	r25, r3
 4aa:	9b bd       	out	0x2b, r25	; 43
 4ac:	8a bd       	out	0x2a, r24	; 42
			OCR2 = 180 + PID_U_t;// Правый двигатель - правая гусеница (вид спереди)			
 4ae:	f5 01       	movw	r30, r10
 4b0:	80 81       	ld	r24, Z
 4b2:	8c 54       	subi	r24, 0x4C	; 76
 4b4:	83 bd       	out	0x23, r24	; 35
			}	

		}
		
		if ((x_flag == 1) && ((x>100) && (y>100)))
 4b6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <x_flag>
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	51 f5       	brne	.+84     	; 0x512 <__stack+0xb3>
 4be:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <x>
 4c2:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <x+0x1>
 4c6:	85 36       	cpi	r24, 0x65	; 101
 4c8:	91 05       	cpc	r25, r1
 4ca:	0c f4       	brge	.+2      	; 0x4ce <__stack+0x6f>
 4cc:	40 ce       	rjmp	.-896    	; 0x14e <main+0x56>
 4ce:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <y>
 4d2:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <y+0x1>
 4d6:	85 36       	cpi	r24, 0x65	; 101
 4d8:	91 05       	cpc	r25, r1
 4da:	0c f4       	brge	.+2      	; 0x4de <__stack+0x7f>
 4dc:	38 ce       	rjmp	.-912    	; 0x14e <main+0x56>
		{	
			PORTB |= (1<<0);
 4de:	c0 9a       	sbi	0x18, 0	; 24
			PORTD &= ~(1<<7); // Запускем левый двигатель вперед, а правый назад
 4e0:	97 98       	cbi	0x12, 7	; 18
			
			OCR1A = 225; // Левый двигатель - левая гусеница (вид спереди)
 4e2:	21 ee       	ldi	r18, 0xE1	; 225
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	3b bd       	out	0x2b, r19	; 43
 4e8:	2a bd       	out	0x2a, r18	; 42
			OCR2 = 30; // Правый двигатель - правая гусеница (вид спереди)
 4ea:	3e e1       	ldi	r19, 0x1E	; 30
 4ec:	33 bd       	out	0x23, r19	; 35

			x_flag = 0;
 4ee:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <x_flag>
			
			ERR_x = 0;
 4f2:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <ERR_x+0x1>
 4f6:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <ERR_x>
			ERR_x_priv = 0;
 4fa:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <ERR_x_priv+0x1>
 4fe:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <ERR_x_priv>
			ERR_y = 0;
 502:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <ERR_y+0x1>
 506:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <ERR_y>
			ERR_y_priv = 0;
 50a:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <ERR_y_priv+0x1>
 50e:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <ERR_y_priv>
		}
		if ((y_flag == 1) && ((x>100) && (y>100)))
 512:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 516:	81 30       	cpi	r24, 0x01	; 1
 518:	09 f0       	breq	.+2      	; 0x51c <__stack+0xbd>
 51a:	19 ce       	rjmp	.-974    	; 0x14e <main+0x56>
 51c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <x>
 520:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <x+0x1>
 524:	85 36       	cpi	r24, 0x65	; 101
 526:	91 05       	cpc	r25, r1
 528:	0c f4       	brge	.+2      	; 0x52c <__stack+0xcd>
 52a:	11 ce       	rjmp	.-990    	; 0x14e <main+0x56>
 52c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <y>
 530:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <y+0x1>
 534:	85 36       	cpi	r24, 0x65	; 101
 536:	91 05       	cpc	r25, r1
 538:	0c f4       	brge	.+2      	; 0x53c <__stack+0xdd>
 53a:	09 ce       	rjmp	.-1006   	; 0x14e <main+0x56>
		{
			PORTB &= ~(1<<0); // Запускем правый двигатель вперед, а левый назад
 53c:	c0 98       	cbi	0x18, 0	; 24
			PORTD |= (1<<7);
 53e:	97 9a       	sbi	0x12, 7	; 18
			
			OCR1A = 30; // Левый двигатель - левая гусеница (вид спереди)
 540:	8e e1       	ldi	r24, 0x1E	; 30
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	9b bd       	out	0x2b, r25	; 43
 546:	8a bd       	out	0x2a, r24	; 42
			OCR2 = 225;// Правый двигатель - правая гусеница (вид спереди) 
 548:	91 ee       	ldi	r25, 0xE1	; 225
 54a:	93 bd       	out	0x23, r25	; 35
			
			y_flag = 0;
 54c:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
			
			ERR_x = 0;
 550:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <ERR_x+0x1>
 554:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <ERR_x>
			ERR_x_priv = 0;
 558:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <ERR_x_priv+0x1>
 55c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <ERR_x_priv>
			ERR_y = 0;
 560:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <ERR_y+0x1>
 564:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <ERR_y>
			ERR_y_priv = 0;
 568:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <ERR_y_priv+0x1>
 56c:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <ERR_y_priv>
 570:	ee cd       	rjmp	.-1060   	; 0x14e <main+0x56>
			OCR1A = 180 + PID_U_t; // Левый двигатель - левая гусеница (вид спереди)
			OCR2 = 180 - PID_U_t; // Правый двигатель - правая гусеница (вид спереди)
			}
		}

		if ((y>60) && (x<61))
 572:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <y>
 576:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <y+0x1>
 57a:	cd 97       	sbiw	r24, 0x3d	; 61
 57c:	0c f4       	brge	.+2      	; 0x580 <__stack+0x121>
 57e:	9b cf       	rjmp	.-202    	; 0x4b6 <__stack+0x57>
 580:	17 cf       	rjmp	.-466    	; 0x3b0 <main+0x2b8>
 582:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <y>
 586:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <y+0x1>
 58a:	cd 97       	sbiw	r24, 0x3d	; 61
 58c:	0c f4       	brge	.+2      	; 0x590 <__stack+0x131>
 58e:	93 cf       	rjmp	.-218    	; 0x4b6 <__stack+0x57>
 590:	0f cf       	rjmp	.-482    	; 0x3b0 <main+0x2b8>

00000592 <__subsf3>:
 592:	50 58       	subi	r21, 0x80	; 128

00000594 <__addsf3>:
 594:	bb 27       	eor	r27, r27
 596:	aa 27       	eor	r26, r26
 598:	0e d0       	rcall	.+28     	; 0x5b6 <__addsf3x>
 59a:	e5 c0       	rjmp	.+458    	; 0x766 <__fp_round>
 59c:	d6 d0       	rcall	.+428    	; 0x74a <__fp_pscA>
 59e:	30 f0       	brcs	.+12     	; 0x5ac <__addsf3+0x18>
 5a0:	db d0       	rcall	.+438    	; 0x758 <__fp_pscB>
 5a2:	20 f0       	brcs	.+8      	; 0x5ac <__addsf3+0x18>
 5a4:	31 f4       	brne	.+12     	; 0x5b2 <__addsf3+0x1e>
 5a6:	9f 3f       	cpi	r25, 0xFF	; 255
 5a8:	11 f4       	brne	.+4      	; 0x5ae <__addsf3+0x1a>
 5aa:	1e f4       	brtc	.+6      	; 0x5b2 <__addsf3+0x1e>
 5ac:	cb c0       	rjmp	.+406    	; 0x744 <__fp_nan>
 5ae:	0e f4       	brtc	.+2      	; 0x5b2 <__addsf3+0x1e>
 5b0:	e0 95       	com	r30
 5b2:	e7 fb       	bst	r30, 7
 5b4:	c1 c0       	rjmp	.+386    	; 0x738 <__fp_inf>

000005b6 <__addsf3x>:
 5b6:	e9 2f       	mov	r30, r25
 5b8:	e7 d0       	rcall	.+462    	; 0x788 <__fp_split3>
 5ba:	80 f3       	brcs	.-32     	; 0x59c <__addsf3+0x8>
 5bc:	ba 17       	cp	r27, r26
 5be:	62 07       	cpc	r22, r18
 5c0:	73 07       	cpc	r23, r19
 5c2:	84 07       	cpc	r24, r20
 5c4:	95 07       	cpc	r25, r21
 5c6:	18 f0       	brcs	.+6      	; 0x5ce <__addsf3x+0x18>
 5c8:	71 f4       	brne	.+28     	; 0x5e6 <__addsf3x+0x30>
 5ca:	9e f5       	brtc	.+102    	; 0x632 <__addsf3x+0x7c>
 5cc:	ff c0       	rjmp	.+510    	; 0x7cc <__fp_zero>
 5ce:	0e f4       	brtc	.+2      	; 0x5d2 <__addsf3x+0x1c>
 5d0:	e0 95       	com	r30
 5d2:	0b 2e       	mov	r0, r27
 5d4:	ba 2f       	mov	r27, r26
 5d6:	a0 2d       	mov	r26, r0
 5d8:	0b 01       	movw	r0, r22
 5da:	b9 01       	movw	r22, r18
 5dc:	90 01       	movw	r18, r0
 5de:	0c 01       	movw	r0, r24
 5e0:	ca 01       	movw	r24, r20
 5e2:	a0 01       	movw	r20, r0
 5e4:	11 24       	eor	r1, r1
 5e6:	ff 27       	eor	r31, r31
 5e8:	59 1b       	sub	r21, r25
 5ea:	99 f0       	breq	.+38     	; 0x612 <__addsf3x+0x5c>
 5ec:	59 3f       	cpi	r21, 0xF9	; 249
 5ee:	50 f4       	brcc	.+20     	; 0x604 <__addsf3x+0x4e>
 5f0:	50 3e       	cpi	r21, 0xE0	; 224
 5f2:	68 f1       	brcs	.+90     	; 0x64e <__addsf3x+0x98>
 5f4:	1a 16       	cp	r1, r26
 5f6:	f0 40       	sbci	r31, 0x00	; 0
 5f8:	a2 2f       	mov	r26, r18
 5fa:	23 2f       	mov	r18, r19
 5fc:	34 2f       	mov	r19, r20
 5fe:	44 27       	eor	r20, r20
 600:	58 5f       	subi	r21, 0xF8	; 248
 602:	f3 cf       	rjmp	.-26     	; 0x5ea <__addsf3x+0x34>
 604:	46 95       	lsr	r20
 606:	37 95       	ror	r19
 608:	27 95       	ror	r18
 60a:	a7 95       	ror	r26
 60c:	f0 40       	sbci	r31, 0x00	; 0
 60e:	53 95       	inc	r21
 610:	c9 f7       	brne	.-14     	; 0x604 <__addsf3x+0x4e>
 612:	7e f4       	brtc	.+30     	; 0x632 <__addsf3x+0x7c>
 614:	1f 16       	cp	r1, r31
 616:	ba 0b       	sbc	r27, r26
 618:	62 0b       	sbc	r22, r18
 61a:	73 0b       	sbc	r23, r19
 61c:	84 0b       	sbc	r24, r20
 61e:	ba f0       	brmi	.+46     	; 0x64e <__addsf3x+0x98>
 620:	91 50       	subi	r25, 0x01	; 1
 622:	a1 f0       	breq	.+40     	; 0x64c <__addsf3x+0x96>
 624:	ff 0f       	add	r31, r31
 626:	bb 1f       	adc	r27, r27
 628:	66 1f       	adc	r22, r22
 62a:	77 1f       	adc	r23, r23
 62c:	88 1f       	adc	r24, r24
 62e:	c2 f7       	brpl	.-16     	; 0x620 <__addsf3x+0x6a>
 630:	0e c0       	rjmp	.+28     	; 0x64e <__addsf3x+0x98>
 632:	ba 0f       	add	r27, r26
 634:	62 1f       	adc	r22, r18
 636:	73 1f       	adc	r23, r19
 638:	84 1f       	adc	r24, r20
 63a:	48 f4       	brcc	.+18     	; 0x64e <__addsf3x+0x98>
 63c:	87 95       	ror	r24
 63e:	77 95       	ror	r23
 640:	67 95       	ror	r22
 642:	b7 95       	ror	r27
 644:	f7 95       	ror	r31
 646:	9e 3f       	cpi	r25, 0xFE	; 254
 648:	08 f0       	brcs	.+2      	; 0x64c <__addsf3x+0x96>
 64a:	b3 cf       	rjmp	.-154    	; 0x5b2 <__addsf3+0x1e>
 64c:	93 95       	inc	r25
 64e:	88 0f       	add	r24, r24
 650:	08 f0       	brcs	.+2      	; 0x654 <__addsf3x+0x9e>
 652:	99 27       	eor	r25, r25
 654:	ee 0f       	add	r30, r30
 656:	97 95       	ror	r25
 658:	87 95       	ror	r24
 65a:	08 95       	ret

0000065c <__fixsfsi>:
 65c:	04 d0       	rcall	.+8      	; 0x666 <__fixunssfsi>
 65e:	68 94       	set
 660:	b1 11       	cpse	r27, r1
 662:	b5 c0       	rjmp	.+362    	; 0x7ce <__fp_szero>
 664:	08 95       	ret

00000666 <__fixunssfsi>:
 666:	98 d0       	rcall	.+304    	; 0x798 <__fp_splitA>
 668:	88 f0       	brcs	.+34     	; 0x68c <__fixunssfsi+0x26>
 66a:	9f 57       	subi	r25, 0x7F	; 127
 66c:	90 f0       	brcs	.+36     	; 0x692 <__fixunssfsi+0x2c>
 66e:	b9 2f       	mov	r27, r25
 670:	99 27       	eor	r25, r25
 672:	b7 51       	subi	r27, 0x17	; 23
 674:	a0 f0       	brcs	.+40     	; 0x69e <__fixunssfsi+0x38>
 676:	d1 f0       	breq	.+52     	; 0x6ac <__fixunssfsi+0x46>
 678:	66 0f       	add	r22, r22
 67a:	77 1f       	adc	r23, r23
 67c:	88 1f       	adc	r24, r24
 67e:	99 1f       	adc	r25, r25
 680:	1a f0       	brmi	.+6      	; 0x688 <__fixunssfsi+0x22>
 682:	ba 95       	dec	r27
 684:	c9 f7       	brne	.-14     	; 0x678 <__fixunssfsi+0x12>
 686:	12 c0       	rjmp	.+36     	; 0x6ac <__fixunssfsi+0x46>
 688:	b1 30       	cpi	r27, 0x01	; 1
 68a:	81 f0       	breq	.+32     	; 0x6ac <__fixunssfsi+0x46>
 68c:	9f d0       	rcall	.+318    	; 0x7cc <__fp_zero>
 68e:	b1 e0       	ldi	r27, 0x01	; 1
 690:	08 95       	ret
 692:	9c c0       	rjmp	.+312    	; 0x7cc <__fp_zero>
 694:	67 2f       	mov	r22, r23
 696:	78 2f       	mov	r23, r24
 698:	88 27       	eor	r24, r24
 69a:	b8 5f       	subi	r27, 0xF8	; 248
 69c:	39 f0       	breq	.+14     	; 0x6ac <__fixunssfsi+0x46>
 69e:	b9 3f       	cpi	r27, 0xF9	; 249
 6a0:	cc f3       	brlt	.-14     	; 0x694 <__fixunssfsi+0x2e>
 6a2:	86 95       	lsr	r24
 6a4:	77 95       	ror	r23
 6a6:	67 95       	ror	r22
 6a8:	b3 95       	inc	r27
 6aa:	d9 f7       	brne	.-10     	; 0x6a2 <__fixunssfsi+0x3c>
 6ac:	3e f4       	brtc	.+14     	; 0x6bc <__fixunssfsi+0x56>
 6ae:	90 95       	com	r25
 6b0:	80 95       	com	r24
 6b2:	70 95       	com	r23
 6b4:	61 95       	neg	r22
 6b6:	7f 4f       	sbci	r23, 0xFF	; 255
 6b8:	8f 4f       	sbci	r24, 0xFF	; 255
 6ba:	9f 4f       	sbci	r25, 0xFF	; 255
 6bc:	08 95       	ret

000006be <__floatunsisf>:
 6be:	e8 94       	clt
 6c0:	09 c0       	rjmp	.+18     	; 0x6d4 <__floatsisf+0x12>

000006c2 <__floatsisf>:
 6c2:	97 fb       	bst	r25, 7
 6c4:	3e f4       	brtc	.+14     	; 0x6d4 <__floatsisf+0x12>
 6c6:	90 95       	com	r25
 6c8:	80 95       	com	r24
 6ca:	70 95       	com	r23
 6cc:	61 95       	neg	r22
 6ce:	7f 4f       	sbci	r23, 0xFF	; 255
 6d0:	8f 4f       	sbci	r24, 0xFF	; 255
 6d2:	9f 4f       	sbci	r25, 0xFF	; 255
 6d4:	99 23       	and	r25, r25
 6d6:	a9 f0       	breq	.+42     	; 0x702 <__floatsisf+0x40>
 6d8:	f9 2f       	mov	r31, r25
 6da:	96 e9       	ldi	r25, 0x96	; 150
 6dc:	bb 27       	eor	r27, r27
 6de:	93 95       	inc	r25
 6e0:	f6 95       	lsr	r31
 6e2:	87 95       	ror	r24
 6e4:	77 95       	ror	r23
 6e6:	67 95       	ror	r22
 6e8:	b7 95       	ror	r27
 6ea:	f1 11       	cpse	r31, r1
 6ec:	f8 cf       	rjmp	.-16     	; 0x6de <__floatsisf+0x1c>
 6ee:	fa f4       	brpl	.+62     	; 0x72e <__floatsisf+0x6c>
 6f0:	bb 0f       	add	r27, r27
 6f2:	11 f4       	brne	.+4      	; 0x6f8 <__floatsisf+0x36>
 6f4:	60 ff       	sbrs	r22, 0
 6f6:	1b c0       	rjmp	.+54     	; 0x72e <__floatsisf+0x6c>
 6f8:	6f 5f       	subi	r22, 0xFF	; 255
 6fa:	7f 4f       	sbci	r23, 0xFF	; 255
 6fc:	8f 4f       	sbci	r24, 0xFF	; 255
 6fe:	9f 4f       	sbci	r25, 0xFF	; 255
 700:	16 c0       	rjmp	.+44     	; 0x72e <__floatsisf+0x6c>
 702:	88 23       	and	r24, r24
 704:	11 f0       	breq	.+4      	; 0x70a <__floatsisf+0x48>
 706:	96 e9       	ldi	r25, 0x96	; 150
 708:	11 c0       	rjmp	.+34     	; 0x72c <__floatsisf+0x6a>
 70a:	77 23       	and	r23, r23
 70c:	21 f0       	breq	.+8      	; 0x716 <__floatsisf+0x54>
 70e:	9e e8       	ldi	r25, 0x8E	; 142
 710:	87 2f       	mov	r24, r23
 712:	76 2f       	mov	r23, r22
 714:	05 c0       	rjmp	.+10     	; 0x720 <__floatsisf+0x5e>
 716:	66 23       	and	r22, r22
 718:	71 f0       	breq	.+28     	; 0x736 <__floatsisf+0x74>
 71a:	96 e8       	ldi	r25, 0x86	; 134
 71c:	86 2f       	mov	r24, r22
 71e:	70 e0       	ldi	r23, 0x00	; 0
 720:	60 e0       	ldi	r22, 0x00	; 0
 722:	2a f0       	brmi	.+10     	; 0x72e <__floatsisf+0x6c>
 724:	9a 95       	dec	r25
 726:	66 0f       	add	r22, r22
 728:	77 1f       	adc	r23, r23
 72a:	88 1f       	adc	r24, r24
 72c:	da f7       	brpl	.-10     	; 0x724 <__floatsisf+0x62>
 72e:	88 0f       	add	r24, r24
 730:	96 95       	lsr	r25
 732:	87 95       	ror	r24
 734:	97 f9       	bld	r25, 7
 736:	08 95       	ret

00000738 <__fp_inf>:
 738:	97 f9       	bld	r25, 7
 73a:	9f 67       	ori	r25, 0x7F	; 127
 73c:	80 e8       	ldi	r24, 0x80	; 128
 73e:	70 e0       	ldi	r23, 0x00	; 0
 740:	60 e0       	ldi	r22, 0x00	; 0
 742:	08 95       	ret

00000744 <__fp_nan>:
 744:	9f ef       	ldi	r25, 0xFF	; 255
 746:	80 ec       	ldi	r24, 0xC0	; 192
 748:	08 95       	ret

0000074a <__fp_pscA>:
 74a:	00 24       	eor	r0, r0
 74c:	0a 94       	dec	r0
 74e:	16 16       	cp	r1, r22
 750:	17 06       	cpc	r1, r23
 752:	18 06       	cpc	r1, r24
 754:	09 06       	cpc	r0, r25
 756:	08 95       	ret

00000758 <__fp_pscB>:
 758:	00 24       	eor	r0, r0
 75a:	0a 94       	dec	r0
 75c:	12 16       	cp	r1, r18
 75e:	13 06       	cpc	r1, r19
 760:	14 06       	cpc	r1, r20
 762:	05 06       	cpc	r0, r21
 764:	08 95       	ret

00000766 <__fp_round>:
 766:	09 2e       	mov	r0, r25
 768:	03 94       	inc	r0
 76a:	00 0c       	add	r0, r0
 76c:	11 f4       	brne	.+4      	; 0x772 <__fp_round+0xc>
 76e:	88 23       	and	r24, r24
 770:	52 f0       	brmi	.+20     	; 0x786 <__fp_round+0x20>
 772:	bb 0f       	add	r27, r27
 774:	40 f4       	brcc	.+16     	; 0x786 <__fp_round+0x20>
 776:	bf 2b       	or	r27, r31
 778:	11 f4       	brne	.+4      	; 0x77e <__fp_round+0x18>
 77a:	60 ff       	sbrs	r22, 0
 77c:	04 c0       	rjmp	.+8      	; 0x786 <__fp_round+0x20>
 77e:	6f 5f       	subi	r22, 0xFF	; 255
 780:	7f 4f       	sbci	r23, 0xFF	; 255
 782:	8f 4f       	sbci	r24, 0xFF	; 255
 784:	9f 4f       	sbci	r25, 0xFF	; 255
 786:	08 95       	ret

00000788 <__fp_split3>:
 788:	57 fd       	sbrc	r21, 7
 78a:	90 58       	subi	r25, 0x80	; 128
 78c:	44 0f       	add	r20, r20
 78e:	55 1f       	adc	r21, r21
 790:	59 f0       	breq	.+22     	; 0x7a8 <__fp_splitA+0x10>
 792:	5f 3f       	cpi	r21, 0xFF	; 255
 794:	71 f0       	breq	.+28     	; 0x7b2 <__fp_splitA+0x1a>
 796:	47 95       	ror	r20

00000798 <__fp_splitA>:
 798:	88 0f       	add	r24, r24
 79a:	97 fb       	bst	r25, 7
 79c:	99 1f       	adc	r25, r25
 79e:	61 f0       	breq	.+24     	; 0x7b8 <__fp_splitA+0x20>
 7a0:	9f 3f       	cpi	r25, 0xFF	; 255
 7a2:	79 f0       	breq	.+30     	; 0x7c2 <__fp_splitA+0x2a>
 7a4:	87 95       	ror	r24
 7a6:	08 95       	ret
 7a8:	12 16       	cp	r1, r18
 7aa:	13 06       	cpc	r1, r19
 7ac:	14 06       	cpc	r1, r20
 7ae:	55 1f       	adc	r21, r21
 7b0:	f2 cf       	rjmp	.-28     	; 0x796 <__fp_split3+0xe>
 7b2:	46 95       	lsr	r20
 7b4:	f1 df       	rcall	.-30     	; 0x798 <__fp_splitA>
 7b6:	08 c0       	rjmp	.+16     	; 0x7c8 <__fp_splitA+0x30>
 7b8:	16 16       	cp	r1, r22
 7ba:	17 06       	cpc	r1, r23
 7bc:	18 06       	cpc	r1, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	f1 cf       	rjmp	.-30     	; 0x7a4 <__fp_splitA+0xc>
 7c2:	86 95       	lsr	r24
 7c4:	71 05       	cpc	r23, r1
 7c6:	61 05       	cpc	r22, r1
 7c8:	08 94       	sec
 7ca:	08 95       	ret

000007cc <__fp_zero>:
 7cc:	e8 94       	clt

000007ce <__fp_szero>:
 7ce:	bb 27       	eor	r27, r27
 7d0:	66 27       	eor	r22, r22
 7d2:	77 27       	eor	r23, r23
 7d4:	cb 01       	movw	r24, r22
 7d6:	97 f9       	bld	r25, 7
 7d8:	08 95       	ret

000007da <__mulsf3>:
 7da:	0b d0       	rcall	.+22     	; 0x7f2 <__mulsf3x>
 7dc:	c4 cf       	rjmp	.-120    	; 0x766 <__fp_round>
 7de:	b5 df       	rcall	.-150    	; 0x74a <__fp_pscA>
 7e0:	28 f0       	brcs	.+10     	; 0x7ec <__mulsf3+0x12>
 7e2:	ba df       	rcall	.-140    	; 0x758 <__fp_pscB>
 7e4:	18 f0       	brcs	.+6      	; 0x7ec <__mulsf3+0x12>
 7e6:	95 23       	and	r25, r21
 7e8:	09 f0       	breq	.+2      	; 0x7ec <__mulsf3+0x12>
 7ea:	a6 cf       	rjmp	.-180    	; 0x738 <__fp_inf>
 7ec:	ab cf       	rjmp	.-170    	; 0x744 <__fp_nan>
 7ee:	11 24       	eor	r1, r1
 7f0:	ee cf       	rjmp	.-36     	; 0x7ce <__fp_szero>

000007f2 <__mulsf3x>:
 7f2:	ca df       	rcall	.-108    	; 0x788 <__fp_split3>
 7f4:	a0 f3       	brcs	.-24     	; 0x7de <__mulsf3+0x4>

000007f6 <__mulsf3_pse>:
 7f6:	95 9f       	mul	r25, r21
 7f8:	d1 f3       	breq	.-12     	; 0x7ee <__mulsf3+0x14>
 7fa:	95 0f       	add	r25, r21
 7fc:	50 e0       	ldi	r21, 0x00	; 0
 7fe:	55 1f       	adc	r21, r21
 800:	62 9f       	mul	r22, r18
 802:	f0 01       	movw	r30, r0
 804:	72 9f       	mul	r23, r18
 806:	bb 27       	eor	r27, r27
 808:	f0 0d       	add	r31, r0
 80a:	b1 1d       	adc	r27, r1
 80c:	63 9f       	mul	r22, r19
 80e:	aa 27       	eor	r26, r26
 810:	f0 0d       	add	r31, r0
 812:	b1 1d       	adc	r27, r1
 814:	aa 1f       	adc	r26, r26
 816:	64 9f       	mul	r22, r20
 818:	66 27       	eor	r22, r22
 81a:	b0 0d       	add	r27, r0
 81c:	a1 1d       	adc	r26, r1
 81e:	66 1f       	adc	r22, r22
 820:	82 9f       	mul	r24, r18
 822:	22 27       	eor	r18, r18
 824:	b0 0d       	add	r27, r0
 826:	a1 1d       	adc	r26, r1
 828:	62 1f       	adc	r22, r18
 82a:	73 9f       	mul	r23, r19
 82c:	b0 0d       	add	r27, r0
 82e:	a1 1d       	adc	r26, r1
 830:	62 1f       	adc	r22, r18
 832:	83 9f       	mul	r24, r19
 834:	a0 0d       	add	r26, r0
 836:	61 1d       	adc	r22, r1
 838:	22 1f       	adc	r18, r18
 83a:	74 9f       	mul	r23, r20
 83c:	33 27       	eor	r19, r19
 83e:	a0 0d       	add	r26, r0
 840:	61 1d       	adc	r22, r1
 842:	23 1f       	adc	r18, r19
 844:	84 9f       	mul	r24, r20
 846:	60 0d       	add	r22, r0
 848:	21 1d       	adc	r18, r1
 84a:	82 2f       	mov	r24, r18
 84c:	76 2f       	mov	r23, r22
 84e:	6a 2f       	mov	r22, r26
 850:	11 24       	eor	r1, r1
 852:	9f 57       	subi	r25, 0x7F	; 127
 854:	50 40       	sbci	r21, 0x00	; 0
 856:	8a f0       	brmi	.+34     	; 0x87a <__mulsf3_pse+0x84>
 858:	e1 f0       	breq	.+56     	; 0x892 <__mulsf3_pse+0x9c>
 85a:	88 23       	and	r24, r24
 85c:	4a f0       	brmi	.+18     	; 0x870 <__mulsf3_pse+0x7a>
 85e:	ee 0f       	add	r30, r30
 860:	ff 1f       	adc	r31, r31
 862:	bb 1f       	adc	r27, r27
 864:	66 1f       	adc	r22, r22
 866:	77 1f       	adc	r23, r23
 868:	88 1f       	adc	r24, r24
 86a:	91 50       	subi	r25, 0x01	; 1
 86c:	50 40       	sbci	r21, 0x00	; 0
 86e:	a9 f7       	brne	.-22     	; 0x85a <__mulsf3_pse+0x64>
 870:	9e 3f       	cpi	r25, 0xFE	; 254
 872:	51 05       	cpc	r21, r1
 874:	70 f0       	brcs	.+28     	; 0x892 <__mulsf3_pse+0x9c>
 876:	60 cf       	rjmp	.-320    	; 0x738 <__fp_inf>
 878:	aa cf       	rjmp	.-172    	; 0x7ce <__fp_szero>
 87a:	5f 3f       	cpi	r21, 0xFF	; 255
 87c:	ec f3       	brlt	.-6      	; 0x878 <__mulsf3_pse+0x82>
 87e:	98 3e       	cpi	r25, 0xE8	; 232
 880:	dc f3       	brlt	.-10     	; 0x878 <__mulsf3_pse+0x82>
 882:	86 95       	lsr	r24
 884:	77 95       	ror	r23
 886:	67 95       	ror	r22
 888:	b7 95       	ror	r27
 88a:	f7 95       	ror	r31
 88c:	e7 95       	ror	r30
 88e:	9f 5f       	subi	r25, 0xFF	; 255
 890:	c1 f7       	brne	.-16     	; 0x882 <__mulsf3_pse+0x8c>
 892:	fe 2b       	or	r31, r30
 894:	88 0f       	add	r24, r24
 896:	91 1d       	adc	r25, r1
 898:	96 95       	lsr	r25
 89a:	87 95       	ror	r24
 89c:	97 f9       	bld	r25, 7
 89e:	08 95       	ret

000008a0 <round>:
 8a0:	7b df       	rcall	.-266    	; 0x798 <__fp_splitA>
 8a2:	e0 f0       	brcs	.+56     	; 0x8dc <round+0x3c>
 8a4:	9e 37       	cpi	r25, 0x7E	; 126
 8a6:	d8 f0       	brcs	.+54     	; 0x8de <round+0x3e>
 8a8:	96 39       	cpi	r25, 0x96	; 150
 8aa:	b8 f4       	brcc	.+46     	; 0x8da <round+0x3a>
 8ac:	9e 38       	cpi	r25, 0x8E	; 142
 8ae:	48 f4       	brcc	.+18     	; 0x8c2 <round+0x22>
 8b0:	67 2f       	mov	r22, r23
 8b2:	78 2f       	mov	r23, r24
 8b4:	88 27       	eor	r24, r24
 8b6:	98 5f       	subi	r25, 0xF8	; 248
 8b8:	f9 cf       	rjmp	.-14     	; 0x8ac <round+0xc>
 8ba:	86 95       	lsr	r24
 8bc:	77 95       	ror	r23
 8be:	67 95       	ror	r22
 8c0:	93 95       	inc	r25
 8c2:	95 39       	cpi	r25, 0x95	; 149
 8c4:	d0 f3       	brcs	.-12     	; 0x8ba <round+0x1a>
 8c6:	b6 2f       	mov	r27, r22
 8c8:	b1 70       	andi	r27, 0x01	; 1
 8ca:	6b 0f       	add	r22, r27
 8cc:	71 1d       	adc	r23, r1
 8ce:	81 1d       	adc	r24, r1
 8d0:	20 f4       	brcc	.+8      	; 0x8da <round+0x3a>
 8d2:	87 95       	ror	r24
 8d4:	77 95       	ror	r23
 8d6:	67 95       	ror	r22
 8d8:	93 95       	inc	r25
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <__fp_mintl>
 8dc:	1c c0       	rjmp	.+56     	; 0x916 <__fp_mpack>
 8de:	77 cf       	rjmp	.-274    	; 0x7ce <__fp_szero>

000008e0 <__fp_mintl>:
 8e0:	88 23       	and	r24, r24
 8e2:	71 f4       	brne	.+28     	; 0x900 <__fp_mintl+0x20>
 8e4:	77 23       	and	r23, r23
 8e6:	21 f0       	breq	.+8      	; 0x8f0 <__fp_mintl+0x10>
 8e8:	98 50       	subi	r25, 0x08	; 8
 8ea:	87 2b       	or	r24, r23
 8ec:	76 2f       	mov	r23, r22
 8ee:	07 c0       	rjmp	.+14     	; 0x8fe <__fp_mintl+0x1e>
 8f0:	66 23       	and	r22, r22
 8f2:	11 f4       	brne	.+4      	; 0x8f8 <__fp_mintl+0x18>
 8f4:	99 27       	eor	r25, r25
 8f6:	0d c0       	rjmp	.+26     	; 0x912 <__fp_mintl+0x32>
 8f8:	90 51       	subi	r25, 0x10	; 16
 8fa:	86 2b       	or	r24, r22
 8fc:	70 e0       	ldi	r23, 0x00	; 0
 8fe:	60 e0       	ldi	r22, 0x00	; 0
 900:	2a f0       	brmi	.+10     	; 0x90c <__fp_mintl+0x2c>
 902:	9a 95       	dec	r25
 904:	66 0f       	add	r22, r22
 906:	77 1f       	adc	r23, r23
 908:	88 1f       	adc	r24, r24
 90a:	da f7       	brpl	.-10     	; 0x902 <__fp_mintl+0x22>
 90c:	88 0f       	add	r24, r24
 90e:	96 95       	lsr	r25
 910:	87 95       	ror	r24
 912:	97 f9       	bld	r25, 7
 914:	08 95       	ret

00000916 <__fp_mpack>:
 916:	9f 3f       	cpi	r25, 0xFF	; 255
 918:	31 f0       	breq	.+12     	; 0x926 <__fp_mpack_finite+0xc>

0000091a <__fp_mpack_finite>:
 91a:	91 50       	subi	r25, 0x01	; 1
 91c:	20 f4       	brcc	.+8      	; 0x926 <__fp_mpack_finite+0xc>
 91e:	87 95       	ror	r24
 920:	77 95       	ror	r23
 922:	67 95       	ror	r22
 924:	b7 95       	ror	r27
 926:	88 0f       	add	r24, r24
 928:	91 1d       	adc	r25, r1
 92a:	96 95       	lsr	r25
 92c:	87 95       	ror	r24
 92e:	97 f9       	bld	r25, 7
 930:	08 95       	ret

00000932 <__divmodhi4>:
 932:	97 fb       	bst	r25, 7
 934:	07 2e       	mov	r0, r23
 936:	16 f4       	brtc	.+4      	; 0x93c <__divmodhi4+0xa>
 938:	00 94       	com	r0
 93a:	06 d0       	rcall	.+12     	; 0x948 <__divmodhi4_neg1>
 93c:	77 fd       	sbrc	r23, 7
 93e:	08 d0       	rcall	.+16     	; 0x950 <__divmodhi4_neg2>
 940:	0b d0       	rcall	.+22     	; 0x958 <__udivmodhi4>
 942:	07 fc       	sbrc	r0, 7
 944:	05 d0       	rcall	.+10     	; 0x950 <__divmodhi4_neg2>
 946:	3e f4       	brtc	.+14     	; 0x956 <__divmodhi4_exit>

00000948 <__divmodhi4_neg1>:
 948:	90 95       	com	r25
 94a:	81 95       	neg	r24
 94c:	9f 4f       	sbci	r25, 0xFF	; 255
 94e:	08 95       	ret

00000950 <__divmodhi4_neg2>:
 950:	70 95       	com	r23
 952:	61 95       	neg	r22
 954:	7f 4f       	sbci	r23, 0xFF	; 255

00000956 <__divmodhi4_exit>:
 956:	08 95       	ret

00000958 <__udivmodhi4>:
 958:	aa 1b       	sub	r26, r26
 95a:	bb 1b       	sub	r27, r27
 95c:	51 e1       	ldi	r21, 0x11	; 17
 95e:	07 c0       	rjmp	.+14     	; 0x96e <__udivmodhi4_ep>

00000960 <__udivmodhi4_loop>:
 960:	aa 1f       	adc	r26, r26
 962:	bb 1f       	adc	r27, r27
 964:	a6 17       	cp	r26, r22
 966:	b7 07       	cpc	r27, r23
 968:	10 f0       	brcs	.+4      	; 0x96e <__udivmodhi4_ep>
 96a:	a6 1b       	sub	r26, r22
 96c:	b7 0b       	sbc	r27, r23

0000096e <__udivmodhi4_ep>:
 96e:	88 1f       	adc	r24, r24
 970:	99 1f       	adc	r25, r25
 972:	5a 95       	dec	r21
 974:	a9 f7       	brne	.-22     	; 0x960 <__udivmodhi4_loop>
 976:	80 95       	com	r24
 978:	90 95       	com	r25
 97a:	bc 01       	movw	r22, r24
 97c:	cd 01       	movw	r24, r26
 97e:	08 95       	ret

00000980 <_exit>:
 980:	f8 94       	cli

00000982 <__stop_program>:
 982:	ff cf       	rjmp	.-2      	; 0x982 <__stop_program>
